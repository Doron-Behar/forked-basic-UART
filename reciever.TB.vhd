library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

entity testbench is
end;

architecture arc OF testbench IS
	constant not_data_at_data_clk:std_logic_vector
	signal data_clk:std_logic:='0'; --clk2400hz
	signal pmod_1:std_logic;
	signal clk100mhz:std_logic:='0';
	signal pmod_2:std_logic;
	signal uart_rx:std_logic;
	signal led:std_logic_vector(7 downto 0);
	signal reset:std_logic:='0';
	signal uart_tx:std_logic;
	component reciever
		port(
			pmod_1	:out std_logic;
			clk100mhz	:in std_logic;
			pmod_2	:out std_logic;
			uart_rx	:in std_logic;
			led		:out std_logic_vector(7 downto 0);
			reset_btn:in std_logic;
			uart_tx	:out std_logic
	);
	end component;
begin
	reciever_inst:reciever
		port map(
			pmod_1	=>pmod_1,
			clk100mhz	=>clk100mhz,
			pmod_2	=>pmod_2,
			uart_rx	=>uart_rx,
			led		=>led,
			reset_btn	=>reset,
			uart_tx	=>uart_tx
		);
	clk100mhz<=not clk100mhz after 5 ns; -- 10 ns = (1/100Mhz)/2, T(50Mhz)=20ns
	reset<='0','1' after 1 us;
	data_clk<=not data_clk after 208333 ns;
	process(data_clk,reset)
		variable counter:integer;
		begin
		if reset='0' then
			counter:=0;
			uart_rx<='0';
		elsif rising_edge(data_clk) then
			counter:=counter+1;
			if counter<not_data_at_data_clk'length then
				uart_rx<=not not_data_at_data_clk(counter);
			else
				counter:=0;
			end if;
		end if;
	end process;
end;
